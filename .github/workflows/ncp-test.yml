name: NCP Object Storage API Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 매일 오전 9시(UTC)에 실행
    - cron: '0 9 * * *'
  workflow_dispatch: # 수동 실행 가능

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-group: [basic, integrity, error-handling]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create test directories
      run: |
        mkdir -p reports
        mkdir -p logs
        
    - name: Run basic functionality tests
      if: matrix.test-group == 'basic'
      env:
        NCP_ACCESS_KEY: ${{ secrets.NCP_ACCESS_KEY }}
        NCP_SECRET_KEY: ${{ secrets.NCP_SECRET_KEY }}
        NCP_ENDPOINT_URL: ${{ secrets.NCP_ENDPOINT_URL }}
        NCP_REGION: ${{ secrets.NCP_REGION }}
      run: |
        pytest test_ncp_storage.py::TestBasicFunctionality \
               -v --html=reports/basic-test-report.html --self-contained-html \
               --junitxml=reports/basic-test-results.xml
               
    - name: Run data integrity tests
      if: matrix.test-group == 'integrity'
      env:
        NCP_ACCESS_KEY: ${{ secrets.NCP_ACCESS_KEY }}
        NCP_SECRET_KEY: ${{ secrets.NCP_SECRET_KEY }}
        NCP_ENDPOINT_URL: ${{ secrets.NCP_ENDPOINT_URL }}
        NCP_REGION: ${{ secrets.NCP_REGION }}
      run: |
        pytest test_ncp_storage.py::TestDataIntegrity \
               -v --html=reports/integrity-test-report.html --self-contained-html \
               --junitxml=reports/integrity-test-results.xml
               
    - name: Run error handling tests
      if: matrix.test-group == 'error-handling'
      env:
        NCP_ACCESS_KEY: ${{ secrets.NCP_ACCESS_KEY }}
        NCP_SECRET_KEY: ${{ secrets.NCP_SECRET_KEY }}
        NCP_ENDPOINT_URL: ${{ secrets.NCP_ENDPOINT_URL }}
        NCP_REGION: ${{ secrets.NCP_REGION }}
      run: |
        pytest test_ncp_storage.py::TestErrorHandling \
               -v --html=reports/error-test-report.html --self-contained-html \
               --junitxml=reports/error-test-results.xml
               
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-group }}
        path: |
          reports/
          logs/
          *.log
          
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test Results (${{ matrix.test-group }})
        path: 'reports/*-test-results.xml'
        reporter: java-junit

  # 전체 테스트 요약 작업
  test-summary:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v3
      
    - name: Create test summary
      run: |
        echo "# NCP Object Storage API 테스트 결과" >> $GITHUB_STEP_SUMMARY
        echo "## 실행된 테스트 그룹" >> $GITHUB_STEP_SUMMARY
        echo "- 기본 기능 테스트" >> $GITHUB_STEP_SUMMARY
        echo "- 데이터 무결성 테스트" >> $GITHUB_STEP_SUMMARY
        echo "- 에러 처리 테스트" >> $GITHUB_STEP_SUMMARY